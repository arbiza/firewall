---
- name: Stop - firewall down
  tags: [never, stop, reload]
  block:
    - name: Set policy to ACCEPT
      ansible.builtin.iptables:
        chain: "{{ item.1 }}"
        policy: ACCEPT
        ip_version: "{{ item.0 }}"
      loop: "{{ ip | product(['INPUT', 'OUTPUT', 'FORWARD']) | list }}"

    - name: FLUSH all rules
      ansible.builtin.iptables:
        chain: "{{ item.1 }}"
        flush: true
        ip_version: "{{ item.0 }}"
      loop: "{{ ip | product(['INPUT', 'OUTPUT', 'FORWARD']) | list }}"

    - name: Get all ipv4 rules for then filter the user-defined the chains
      ansible.builtin.command: iptables -S
      changed_when: false
      register: output_ipv4

    - name: Delete non-standard ipv4 chains
      ansible.builtin.iptables:
        chain: "{{ item }}"
        state: absent
        chain_management: true
        ip_version: ipv4
      loop: "{{ output_ipv4.stdout_lines | arbiza.firewall.extra_chains }}"

    - name: Get all ipv6 rules for then filter the user-defined the chains
      ansible.builtin.command: ip6tables -S
      changed_when: false
      register: output_ipv6

    - name: Delete non-standard ipv6 chains
      ansible.builtin.iptables:
        chain: "{{ item }}"
        state: absent
        chain_management: true
        ip_version: ipv6
      loop: "{{ output_ipv6.stdout_lines | arbiza.firewall.extra_chains }}"

- name: Start - firewall up
  tags: [start, reload]
  block:
    - name: Install iptables
      ansible.builtin.apt:
        name: iptables
        state: present

    ## Keep the existing connections

    - name: Keep the established connections up
      ansible.builtin.iptables:
        chain: "{{ item.1 }}"
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT
        ip_version: "{{ item.0 }}"
      loop: "{{ ip | product(['INPUT', 'OUTPUT']) | list }}"

    ## Set the policies to DROP

    ## Communication that server is allowed to start

    # Accept everything from loopback
    - name: Allow loopback traffic - INPUT
      ansible.builtin.iptables:
        chain: INPUT
        in_interface: "{{ loopback }}"
        jump: ACCEPT
        ip_version: "{{ item }}"
        comment: loopback IN traffic
      loop: "{{ ip }}"

    - name: Allow loopback traffic - INPUT
      ansible.builtin.iptables:
        chain: OUTPUT
        out_interface: "{{ loopback }}"
        jump: ACCEPT
        ip_version: "{{ item }}"
        comment: loopback OUT traffic
      loop: "{{ ip }}"

    # Allow HTTP and HTTPS output to enable system updates
    - name: Allow loopback traffic - OUTPUT
      ansible.builtin.iptables:
        chain: OUTPUT
        protocol: tcp
        match: tcp
        destination_port: "{{ item.1}}"
        jump: ACCEPT
        ip_version: "{{ item.0 }}"
        comment: allow system updates
      loop: "{{ ip | product(['http', 'https']) | list }}"

    # Allow DNS queries
    - name: Allow DNS queries
      ansible.builtin.iptables:
        chain: OUTPUT
        protocol: "{{ item.1  }}"
        destination_port: 53
        source_port: 1024:65535
        jump: ACCEPT
        ip_version: "{{ item.0 }}"
        comment: allow DNS queries
      loop: "{{ ip | product(['tcp', 'udp']) | list }}"

    - name: Create INPUT rules
      ansible.builtin.include_tasks: input.yml
      loop: "{{ input }}"

    - name: Create OUTPUT rules
      ansible.builtin.include_tasks: output.yml
      loop: "{{ output }}"

    - name: Set policy to DROP
      ansible.builtin.iptables:
        chain: "{{ item.1 }}"
        policy: DROP
        ip_version: "{{ item.0 }}"
      loop: "{{ ip | product(['INPUT', 'OUTPUT', 'FORWARD']) | list }}"

# - name: List IPv4 rules
#   ansible.builtin.include_tasks: list_ipv4.yml
#   tags: [never, list, list_v4]

# - name: List IPv6 rules
#   ansible.builtin.include_tasks: list_ipv4.yml
#   tags: [never, list, list_v4]

#################
## REMOVE

- name: Allow new incoming SYN packets on TCP port 22 (SSH)
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 22
    ctstate: NEW
    syn: match
    jump: ACCEPT
    comment: TEMP SSH.
# - name: Filter test
#   tags: [test]
#   block:

#     - name: Set var vlans
#       ansible.builtin.set_fact:
#         vlans: [{"vlanDescription": "vlan-1", "vlanNumber": "1"}, {"vlanDescription": "vlan-10", "vlanNumber": "10"}]

#     - name: DEBUG vlan python type
#       ansible.builtin.debug:
#         var: vlans

#     - name: DEBUG >> vlan python type
#       ansible.builtin.debug:
#         var: "{{ vlans | arbiza.firewall.nesteddict2items }}"

# - name: Blue test
#   tags: [blue, test]
#   block:

#     - name: Set var vlans
#       ansible.builtin.set_fact:
#         my_color_choice: 'rgb(0.0.255)'

#     - name: Test blue
#       ansible.builtin.assert:
#         that: my_color_choice is blue
